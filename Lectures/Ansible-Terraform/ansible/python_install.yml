# Example of a playbook without using roles
# All tasks needed are included directly in the playbook
### Usecase:
# When you have very simple requirements and there's no point of making a role as the code won't be
#  reused anywhere else
---
- hosts: all
  vars:
    - process_name: "devops" # This should be a secret
  gather_facts: no
  become: true
  tasks:
    - name: Verify Python3 and pip3 are installed
      apt:
        name:
          - python3
          - python3-pip # not required. A list of package names, like C(foo), or package specifier with version, like C(foo=1.0). Name wildcards (fnmatch) like C(apt*) and version wildcards like C(foo=1.0*) are also supported.
        state: present # not required. choices: absent;build-dep;latest;present. Indicates the desired package state. C(latest) ensures that the latest version is installed. C(build-dep) ensures the package build dependencies are installed.
    - name: Verify psutil is installed on system
      pip:
        name: psutil # not required. The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.,This can be a list (since 2.2) and contain version specifiers (since 2.7).
        state: present # not required. choices: absent;forcereinstall;latest;present. The state of module,The 'forcereinstall' option is only available in Ansible 2.1 and above.
        executable: pip3

    - name: Run script
      script: "get-process.py {{process_name}}"
      args:
        executable: python3
      register: script

    - name: Display results
      debug:
        var: script.stdout_lines # not required. A variable name to debug.  Mutually exclusive with the 'msg' option.
